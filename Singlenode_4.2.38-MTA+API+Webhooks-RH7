#!/bin/bash
#
#
# Momentum 4.2.38.0 is being released in three distinct flavors:
#  - RH6 MTA-only bundle. Will operate on the Momentum 3.6 hardware footprint, and is intended primarily for the upgrade of 
#        existing customers currently running Momentum 3.6.x, and for new Momentum on-premise installations in a RH6 environment. 
#        Existing installations of previous RH6 MTA-only releases can also be upgraded to 4.2.38. 
#  - RH7 MTA-only bundle. Primarily meant for new Momentum on-premise installations in a RH7 environment. Existing installations 
#        of previous RH7 MTA-only releases can also be upgraded to 4.2.38.
#  - RH6 Full-featured bundle, including MTA, Message Generation, Webhooks, Analytics, Cassandra, Vertica, etc. 
#        This bundle is intended for upgrade of existing customers running previous Momentum 4.x full-feature releases. 
#        This release is available on the private part of the support site and the internal teams have the ability to download 
#        and share it with existing customers. 
# Bundles, release notes, installation and upgrade instructions, and change log are available on support.messagesystems.com.
#
# This is a full single node installer for Momo 4.2.38 RH7 MTA Only 


export INSTVER="4.2.38"

clear
echo Installing Momentum $INSTVER 
echo
echo Please send the MAC below to licensing@messagesystems.com for a valid license
ifconfig |grep -i "ether " |head -1
echo

echo "Press ENTER/RETURN to continue"
read R

echo Launch a CentOS 7.x instance 
echo \(CentOS Linux 7 x86_64 HVM EBS 1704_01 - ami-51076231\) 
echo Select instance type m3.medium, \(recommended\) click NEXT
echo Select "Protect against accidental termination", click NEXT
echo Update the volume size to 100Mb
echo Click NEXT and add a tag so you can find your instance later
echo Select a security group - I use "ALL TCP"
echo click LAUNCH and select or create a key pair so you can log in for further configuration
echo 
echo Before going further, create a resolvable domain in DNS and ensure that is is resolvable.

echo open a shell and log in 
echo IE: ssh -i mykey.pem ec2-user@ec2-52-191-177-235.us-west-2.compute.amazonaws.com

echo move this installer to that server and execute it there

# if running this manually, make sure you are sudo or root first

sudo -s

echo Send this MAC to licensing@messagesystems.com and ask for a key

ifconfig |grep -i "ether " |head -1
echo

echo "If you have already done all of the above, press ENTER/RETURN to continue"
read R

echo "Enter the friendly name of this server (IE: \"my dev server\")"
read FNAME

echo "Enter the FQDN  (IE: \"myserver.home.net\") or press ENTER/RETURN for default"
read MYFQDN

echo "Enter the name of the system operator (IE: \"Bob Jones\")"
read USRNM

echo "Enter the email address of the above system operator (IE: \"bob@here.com\")"
read EMAIL

echo "What timezone is the server in? (EST,CST,MST,PST)"
read TZ

echo "Do you want to enable Webhooks support? (y/n)"
read WH

echo "Do you want to enable API Generation support? (y/n)"
read GEN



# Only needed for manual deployment
#export FNAME="RH7 Test Server for M4.2.31"
#export MYFQDN="dev2.trymsys.net"
#export USRNM="Tom Mairs"
#export EMAIL="tom.mairs@sparkpost.com"
#export TZ=MST
#export WH=y
#export GEN=y




   if [ $TZ = "EST" ]; then
      MYTZ="America/New_York"
   fi
   if [ $TZ = "CST" ]; then
      MYTZ="America/Chicago"
   fi
   if [ $TZ = "MST" ]; then
      MYTZ="America/Edmonton"
   fi
   if [ $TZ = "PST" ]; then
      MYTZ="America/Los_Angeles"
   fi
   if [ $MYTZ = "" ]; then
      MYTZ="America/Los_Angeles"
   fi

echo "PLEASE WAIT....."

# send MAC to licensing team for appropriate license.

 # Use $HOSTNAME instead
 # MYHOST=`hostname -f`
 if [ $MYFQDN=""]; then
  MYFQDN=`hostname -f`
 fi 
 PUBLICIP=`curl -s checkip.dyndns.org|sed -e 's/.*Current IP Address: //' -e 's/<.*$//' `
 PRIVATEIP=`hostname -i`
  
echo
echo Using these settings:
echo HOSTNAME = $HOSTNAME
echo Public IP = $PUBLICIP
echo Private IP = $PRIVATEIP
echo Time Zone = $MYTZ
echo Owner = $USRNM $EMAIL
echo ServerName = $FNAME
echo FQDN = $MYFQDN
echo Webhooks = $WH
echo API Generation = $GEN


echo

echo
export DEFAULT=/opt/msys/ecelerity/etc/conf/default/

 
echo "Applying environment changes..."
echo "..............................."

echo 'export TZ=$MYTZ' >> /etc/profile
export TZ=$MYTZ



echo "Updating existing packages..."
echo "..............................."
yum clean headers
yum clean packages
yum clean metadata

yum update -y

echo
echo "Adding required packages..."
echo "..............................."

yum -y install perl mcelog sysstat ntp gdb lsof.x86_64 wget yum-utils bind-utils telnet mlocate lynx unzip sudo firewalld make gcc curl cpan mysql*

#Make sure it all stays up to date
#Run a yum update at 3AM daily
echo "0 3 * * * root /usr/bin/yum update -y >/dev/null 2>&1">/etc/cron.d/yum-updates

systemctl stop iptables.service
systemctl stop ip6tables.service
systemctl mask iptables.service
systemctl mask ip6tables.service

systemctl enable ntpd.service
systemctl start  ntpd.service

systemctl stop  postfix.service
systemctl disable postfix.service

systemctl stop  qpidd.service
systemctl disable qpidd.service



echo "ZONE=public
" >> /etc/sysconfig/network-scripts/ifcfg-eth0

systemctl stop firewalld
systemctl start firewalld.service
firewall-cmd --set-default-zone=public
firewall-cmd --zone=public --change-interface=eth0
firewall-cmd --zone=public --permanent --add-service=http
firewall-cmd --zone=public --permanent --add-service=https
firewall-cmd --zone=public --permanent --add-service=ssh
firewall-cmd --zone=public --permanent --add-service=smtp
firewall-cmd --zone=public --permanent --add-port=587/tcp
firewall-cmd --zone=public --permanent --add-port=81/tcp
firewall-cmd --zone=public --permanent --add-port=2081/tcp
firewall-cmd --zone=public --permanent --add-port=2084/tcp

systemctl enable firewalld


echo "export TZ=$MYTZ" >> /etc/profile
export TZ=$MYTZ

echo "$PRIVATEIP  $HOSTNAME
$PUBLICIP $MYFQDN" >> /etc/hosts


echo "
vm.max_map_count = 768000
net.core.rmem_default = 32768
net.core.wmem_default = 32768
net.core.rmem_max = 262144
net.core.wmem_max = 262144
fs.file-max = 250000
net.ipv4.ip_local_port_range = 5000 63000
net.ipv4.tcp_tw_reuse = 1
net.ipv4.tcp_tw_recycle = 1
kernel.shmmax = 68719476736
net.core.somaxconn = 1024
vm.nr_hugepages = 10
kernel.shmmni = 4096
" >> /etc/sysctl.conf

/sbin/sysctl -p /etc/sysctl.conf

sed -i 's/SELINUX=enforcing/SELINUX=disabled/' /etc/selinux/config  
/usr/sbin/setenforce 0

cd /var/tmp

echo "DOWNLOAD the $INSTVER version of Momentum"
echo " or SCP the bundle to /var/tmp" 
echo "Before continuing"
echo


echo "Press ENTER/RETURN to continue to LYNX or ^C to exit now."
read R

lynx https://support.messagesystems.com/docs


###############################################################################

cd /var/tmp

   MOMOVER=`find -name 'momentum-mta-bundle*.tar.gz'`
   if [ $MOMOVER = "" ]; then
      echo "cannot continue - no install bundle found"
      exit
   fi
   
   MOMOREL='momentum-mta-4.'`echo $MOMOVER | cut -d'.' -f 3-5`
   if [ $MOMOREL = "" ]; then
      echo "cannot continue - no install bundle found"
      exit
   fi


echo 
echo Unpacking version $MOMOREL . Please wait....
echo ...
tar -zxf $MOMOVER
cd $MOMOREL/

echo "Installing from $MOMOREL.  press ^C to exit or ENTER to continue"
read R

./setrepodir
pwd >/var/tmp/inst.dir

cat <<EOF >/var/tmp/sedfqdns
s/yournode01.yourdomain.tld/$HOSTNAME/
EOF


yum install -y --config momentum.repo --enablerepo momentum \
msys-ecelerity-config-server \
msys-role-db \
msys-role-mta \
msys-role-mobility \
msys-ecelerity-mobility-db \
msys-ecelerity-engagement-proxy

/opt/msys/ecelerity/bin/ec_lic -f

mkdir -p /opt/msys/etc
< /dev/urandom tr -dc _A-Z-a-z-0-9 | head -c8   > /opt/msys/etc/.svcpasswd
export SVCPASSWD=`cat /opt/msys/etc/.svcpasswd`
export ADMINPASS=admin

echo $HOSTNAME > /opt/msys/etc/.dbhost


service msyspg start
sleep 40
cd /opt/msys/ecelerity/etc
../bin/init_schema --password $SVCPASSWD --admin-password $ADMINPASS

sed -i -e "s/UseCanonicalName DNS/ServerName $HOSTNAME/" ecconfigd.conf
sed -i -e "s/Include \"/#Include \"/" ecconfigd.conf

echo
echo COPY the password below so you can paste it in the next prompt...
echo $SVCPASSWD
echo " ** IMPORTANT **"
echo "Copy the password above to your clip board then paste it for the next prompt" 
echo " ** IMPORTANT **"
echo

/opt/msys/ecelerity/bin/create_ssl_cert ecconfigd $HOSTNAME /var/ecconfigd/apache
/opt/msys/3rdParty/apache/sbin/htdigest -c /var/ecconfigd/repo/svn-auth.htdigest  "ecconfigd repo" ecuser

echo "Deal with the SERVICE password above first... Press ^C to exit or ENTER to continue"
read R

echo
echo use "admin" in the next prompt...
echo

/opt/msys/3rdParty/apache/sbin/htdigest /var/ecconfigd/repo/svn-auth.htdigest "ecconfigd repo" admin 

echo "Deal with the ADMIN password above first... Press ^C to exit or ENTER to continue"
read R

service ecconfigd start

cd /opt/msys/ecelerity/etc
chmod g+ws .
sudo -u ecuser /opt/msys/ecelerity/bin/eccfg bootstrap --singlenode  --username admin --password $ADMINPASS

cd /opt/msys/ecelerity/etc
cat << EOT > conf/default/ecdb.conf
Datasource "ecdb" {
  uri = ( "pgsql:host=$HOSTNAME;dbname=ecelerity;user=ecuser;password=$SVCPASSWD" )
}
EOT

sed -i -e 's|/opt/msys/etc/installer/eccmgr.d/||' conf/default/eccluster.conf
sed -i -e 's|/opt/msys/etc/installer/ecelerity.d/|ecdb.conf|' conf/default/ecelerity.conf

# comment out the event_hydrant and event_hose
sed "/^\s*event_.*}$/ s|^|#|; /^\s*event_/, /);$/ s|^|#|" conf/default/ecelerity.conf

sudo -u ecuser ../bin/eccfg commit -m 'Add ecdb config' --username admin \
   --add-all --password $ADMINPASS

service ecelerity start
service msys-riak start

# To fix the ecconfig stack trace problem
sed -i 's/use strict;/$ENV{GIMLI_WATCHDOG_INTERVAL} = 300;\nuse strict;/' /etc/init.d/ecconfigd
service ecconfigd restart


###########################################################
#These are custom for the SETEAM install
###########################################################

# To label the server with a descriptive and helpful MOTD
# Edit as needed for this install

echo "








##############################################

Welcome to the $FNAME server 
[ https://$MYFQDN ]

Hosting Momentum $MOMOREL MTA ONLY

 - for any questions, please contact
$USRNM <$EMAIL>

##############################################
" > /etc/motd

echo "
echo \"version\" |/opt/msys/ecelerity/bin/ec_console
echo " > /etc/motd.sh

echo "sh /etc/motd.sh" >> /etc/profile



#######################################################################################
#
# WARNING 
#
# This following section is to give users server access
# You may want to edit this section before running the script
#
#######################################################################################
# to give seteam users sudo access to the server
sed -i 's/PasswordAuthentication no/PasswordAuthentication yes/' /etc/ssh/sshd_config   
echo "seteam        ALL=(ALL)       NOPASSWD: ALL" >> /etc/sudoers
systemctl restart  sshd.service

useradd seteam
passwd seteam
#######################################################################################
#######################################################################################


#######################################################################################
#
# WARNING 
#
# This following section generates and alters system configuration
# You may want to edit this section before running the script
#
#######################################################################################


echo "Now customizing configs...  press ^C to exit or ENTER to continue"
read R

mkdir $DEFAULT/lua
mkdir $DEFAULT/conf.d


#################################
# FBL Config
#################################
echo "
Enable_FBL_Header_Insertion = enabled

fbl {
  Auto_Log = true # default is \"false\"
  Log_Path = \"jlog:///var/log/ecelerity/fbllog.jlog=>master\"
  Addresses = ( \"^.*@fbl.$MYFQDN\" ) # default is unset
  Header_Name = \"X-MSFBL\" # this is the default
#  User_String = \"%{vctx_mess:my_context_variable}\" # default is unset
  Message_Disposition = \"pass\" # default is blackhole, also allowed to set to \"pass\"
#  Condition = \"can_relay\" # default is unset, should be name of a vctx entry
}
" > $DEFAULT/conf.d/fbl.conf


#################################
# DKIM Config
#################################
echo "
opendkim_sign = \"enabled\"

opendkim \"opendkim1\" {
  header_canon = \"relaxed\"
  body_canon = \"relaxed\"
  headerlist = (\"from\", \"to\", \"message-id\", \"date\", \"subject\", \"Content-Type\")
  digest = \"rsa-sha256\"
  key = \"/opt/msys/ecelerity/etc/conf/default/dk/%{d}/%{s}.key\"
  dkim_domain \"$MYFQDN\" {
    selector = \"s1024\"
  }

}
" > $DEFAULT/conf.d/dkim.conf



#################################
# ADAPTIVE Config
#################################
echo "
adaptive_enabled = true
adaptive_notification_interval = 5
adaptive_adjustment_interval = 10

adaptive  {
  suspend_sweep_interval = 5
  operational_log_level = \"debug\"
  jlog_file = \"jlog:///var/log/ecelerity/adaptive.rt=>ad_stats\"
  enable_jlog = true
}

alerting {}

scriptlet \"scriptlet\" {
  # Add the Lua adaptive script
  script \"adaptive\" {
    source = \"msys.adaptive\"
  }
}

inbound_audit {
  monitors = (\"300,6\")
}" > $DEFAULT/conf.d/adaptive.conf



#################################
# BINDING Config
#################################
echo "
binding_group general {

  binding \"generic\" {
  }
  binding \"marketing\" {
  }
  binding \"news\" {
  }
  binding \"trans\" {
  }
  binding \"msys\" {
  }
}
" > $DEFAULT/conf.d/bindings.conf


#################################
# General ecelerity config
#################################
sed -i 's/Bounce_Domains /#Bounce_Domains /' $DEFAULT/ecelerity.conf
sed -i 's/Bounce_Behavior /#Bounce_Behavior /' $DEFAULT/ecelerity.conf
sed -i 's/Generate_bounces /#Generate_bounces /' $DEFAULT/ecelerity.conf
echo "include \"conf.d\"" >> $DEFAULT/ecelerity.conf

echo "
#
# Additional ecelerity mods to add.  Remember to INCLUDE this file in ecelerity.conf
#

Bounce_Domains = (\"*.$MYFQDN\")
Bounce_Behavior = blackhole
Generate_bounces = false

scriptlet \"scriptlet\" {
  script \"policy\" {
    source = \"$DEFAULT/lua/policy.lua\"
  }
}

eventloop \"pool\" {
concurrency = 4
}

delivery_pool = \"pool\"
maintainer_pool = \"pool\"


#smtpapi{}

ESMTP_Listener{
  Listen \":587\" {
    Enable = true
    TLS_Verify_Mode = \"require\"
    TLS_Certificate = \"/etc/pki/tls/certs/trymsys.net.crt\"
    TLS_Key = \"/etc/pki/tls/certs/trymsys.net.key\"
    TLS_Client_CA = \"/etc/pki/tls/certs/trymsys.net.crt\"
    TLS_Ciphers = \"DEFAULT\"
    AuthLoginParameters = [
       uri = \"file:///opt/msys/ecelerity/etc/unsafe_passwd\"
    ]
    SMTP_Extensions = ( \"ENHANCEDSTATUSCODES\" \"STARTTLS\" \"AUTH LOGIN\" )
#    tracking_domain = \"$MYFQDN:81\"
  }
}

#tls_macros {}


" > $DEFAULT/conf.d/ecelerity_mods.conf



#################################
# Lua Policy
#################################
echo "
require(\"msys.core\");
require(\"msys.db\");
require(\"msys.pcre\");
require(\"msys.dumper\");
require(\"msys.extended.message\");
require(\"msys.extended.message_routing\");
require(\"msys.extended.ac\");

local mod = {};

--[[ Modify these as necessesary for your demo ]]--
local sinkdomain = \"54.244.3.35\"
local safedomains = { \"mblox.sms.agg\", \"validator.messagesystems.com\", \"messagesystems.com\", \"sparkpost.com\" }

--[[ each rcpt_to function ]]--
function mod:validate_data_spool_each_rcpt (msg, accept, vctx)
--  print (\"Using data_spool_each_rcpt\");
  return msys.core.VALIDATE_CONT;
end 


--[[ each MSG_GEN rcpt_to function ]]--
function mod:msg_gen_data_spool(msg)
--  print (\"Using msg_gen_data_spool\");
  return msys.core.VALIDATE_CONT;
end


--[[ Set Binding function ]]--
function mod:validate_set_binding(msg)
  local domain_str = msys.core.string_new();
  local localpart_str = msys.core.string_new();
  msg:get_envelope2(msys.core.EC_MSG_ENV_TO, localpart_str, domain_str);
  local mydomain = tostring(domain_str);
  local mylocalpart = tostring(localpart_str);
  local validdomain = \"false\"
  local bindingname = msg:header(\"X-Binding\")

  if bindingname[1] then 
    msg:context_set(msys.core.VCTX_MESS, \"mo_binding\", bindingname[1])
  end


-- Test to see if the TO domain is in the safe list
  for i,v in ipairs(safedomains) do
    if v == mydomain then
    --  print (\"Routing to a valid domain: \" .. mydomain);
      validdomain = \"true\"
      break
   end
  end

  if validdomain == \"false\" then

  --  print (\"Sending this to sink: \" .. sinkdomain .. \" / \" .. mydomain);
    msg:routing_domain(sinkdomain);
  end
    if ( ( bindingname[1] ~= \"\" ) and (bindingname[1] ~= nil ) )  then
      local err = msg:binding(bindingname[1]);
    else 
      local err = msg:binding(\"generic\");
    end


-- print(msg:context_get(msys.core.ECMESS_CTX_MESS, 'mo_campaign_id'));

  return msys.core.VALIDATE_CONT;
end;

msys.registerModule(\"policy\", mod);
" > $DEFAULT/lua/policy.lua

# Install Generation if needed
if [ $GEN = "y" ]; then
      cd /var/tmp/$MOMOREL
      ./setrepodir
      yum install -y --config momentum.repo --enablerepo momentum msys-nginx

### START OF Web Proxy config ###
      rm -rf /opt/msys/3rdParty/nginx/conf.d/api_webhooks.conf
      rm -rf /opt/msys/3rdParty/nginx/conf.d/web_proxy.conf
      rm -rf /opt/msys/3rdParty/nginx/conf.d/app.loc
      rm -rf /opt/msys/3rdParty/nginx/conf.d/momo.loc
      rm -rf /opt/msys/3rdParty/nginx/conf.d/default.cors
      rm -rf /opt/msys/3rdParty/nginx/conf.d/momo_upstream.conf
      rm -rf /opt/msys/3rdParty/nginx/conf.d/click_proxy_upstream.conf
      rm -rf /opt/msys/3rdParty/nginx/conf.d/api_webhooks_upstream.conf

      cp -i /opt/msys/ecelerity/etc/sample-configs/nginx/web_proxy.conf /opt/msys/3rdParty/nginx/conf.d/
      cp -i /opt/msys/ecelerity/etc/sample-configs/nginx/app.loc /opt/msys/3rdParty/nginx/conf.d/
      cp -i /opt/msys/ecelerity/etc/sample-configs/nginx/momo.loc /opt/msys/3rdParty/nginx/conf.d/
      cp -i /opt/msys/ecelerity/etc/sample-configs/nginx/default.cors /opt/msys/3rdParty/nginx/conf.d/
      cp -i /opt/msys/ecelerity/etc/sample-configs/nginx/momo_upstream.conf /opt/msys/3rdParty/nginx/conf.d/
      cp -i /opt/msys/ecelerity/etc/sample-configs/nginx/click_proxy_upstream.conf /opt/msys/3rdParty/nginx/conf.d/
      cp -i /opt/msys/ecelerity/etc/sample-configs/nginx/api_webhooks_upstream.conf /opt/msys/3rdParty/nginx/conf.d/
      cp -f /dev/null api_webhooks.conf
      
      cd /opt/msys/3rdParty/nginx/conf.d/
      
      sed -i "0,/^#UN.*;$/ s/^#UN.*;$/  server $MYFQDN:2081;/" ./click_proxy_upstream.conf    
      sed -i "0,/^#UN.*;$/ s/^#UN.*;$/  server $MYFQDN:2081;/" ./momo_upstream.conf    
      sed -i "0,/^#UN.*;$/ s/^#UN.*;$/  server $MYFQDN:2081;/" ./api_webhooks_upstream.conf   
      sed -i 's/#include/include/' ./web_proxy.conf 
  
      service msys-nginx configtest
      service msys-nginx start
      service ecelerity restart
### END OF Web Proxy config ###

### API CONFIG ###
      rm -rf /opt/msys/ecelerity/etc/conf/default/msg_gen.conf
      rm -rf /opt/msys/ecelerity/etc/conf/default/smtpapi.conf

      cp /opt/msys/ecelerity/etc/sample-configs/default/msg_gen.conf  /opt/msys/ecelerity/etc/conf/default/
      cp /opt/msys/ecelerity/etc/sample-configs/default/smtpapi.conf /opt/msys/ecelerity/etc/conf/default/

      sed -i -e 's|cluster_cfg = true|cluster_cfg = false|' /opt/msys/ecelerity/etc/conf/default/msg_gen.conf
      sed -i "s/__EXTERNAL_DNS_HOSTNAME__/$MYFQDN/" $DEFAULT/msg_gen.conf
      sed -i "s/__EXTERNAL_DNS_HOSTNAME__/$MYFQDN/" $DEFAULT/conf.d/ecelerity_mods.conf
      sed -i -e 's/# include "msg_gen.conf"/include "msg_gen.conf"/'  $DEFAULT/ecelerity.conf
      sed -i -e 's/# include "smtpapi.conf"/include "smtpapi.conf"/'  $DEFAULT/ecelerity.conf
      
      /opt/msys/ecelerity/bin/eccfg commit --username admin --password $ADMINPASS  --add-all --message "Including cluster config and msg_gen config"
fi

# Install Webhooks if needed
if [ $WH = "y" ]; then

      cd /var/tmp/$MOMOREL
      ./setrepodir

yum install -y --config momentum.repo --enablerepo momentum \
 msys-rabbitmq \
 msys-app-webhooks-api \
 msys-app-webhooks-etl

 ### START OF Web Proxy config ###
      rm -rf /opt/msys/3rdParty/nginx/conf.d/api_webhooks.conf
      rm -rf /opt/msys/3rdParty/nginx/conf.d/web_proxy.conf
      rm -rf /opt/msys/3rdParty/nginx/conf.d/app.loc
      rm -rf /opt/msys/3rdParty/nginx/conf.d/momo.loc
      rm -rf /opt/msys/3rdParty/nginx/conf.d/default.cors
      rm -rf /opt/msys/3rdParty/nginx/conf.d/momo_upstream.conf
      rm -rf /opt/msys/3rdParty/nginx/conf.d/click_proxy_upstream.conf
      rm -rf /opt/msys/3rdParty/nginx/conf.d/api_webhooks_upstream.conf

      cp -i /opt/msys/ecelerity/etc/sample-configs/nginx/web_proxy.conf /opt/msys/3rdParty/nginx/conf.d/
      cp -i /opt/msys/ecelerity/etc/sample-configs/nginx/app.loc /opt/msys/3rdParty/nginx/conf.d/
      cp -i /opt/msys/ecelerity/etc/sample-configs/nginx/momo.loc /opt/msys/3rdParty/nginx/conf.d/
      cp -i /opt/msys/ecelerity/etc/sample-configs/nginx/default.cors /opt/msys/3rdParty/nginx/conf.d/
      cp -i /opt/msys/ecelerity/etc/sample-configs/nginx/momo_upstream.conf /opt/msys/3rdParty/nginx/conf.d/
      cp -i /opt/msys/ecelerity/etc/sample-configs/nginx/click_proxy_upstream.conf /opt/msys/3rdParty/nginx/conf.d/
      cp -i /opt/msys/ecelerity/etc/sample-configs/nginx/api_webhooks_upstream.conf /opt/msys/3rdParty/nginx/conf.d/
      cp -f /dev/null api_webhooks.conf
      
      cd /opt/msys/3rdParty/nginx/conf.d/
      
      sed -i "0,/^#UN.*;$/ s/^#UN.*;$/  server $MYFQDN:2081;/" ./click_proxy_upstream.conf    
      sed -i "0,/^#UN.*;$/ s/^#UN.*;$/  server $MYFQDN:2081;/" ./momo_upstream.conf    
      sed -i "0,/^#UN.*;$/ s/^#UN.*;$/  server $MYFQDN:2081;/" ./api_webhooks_upstream.conf   
      sed -i 's/#include/include/' ./web_proxy.conf 
  
      service msys-nginx configtest
      service msys-nginx start
      service ecelerity restart
### END OF Web Proxy config ###

### WH CONFIG ###
      sed -i -e 's/,{"::1", 5672}//'  /opt/msys/3rdParty/etc/rabbitmq/rabbitmq.config

      export THIRDPARTY=/opt/msys/3rdParty
      export RABBITMQCTL="$THIRDPARTY/sbin/rabbitmqctl"
      export RABBITMQADMIN="$THIRDPARTY/sbin/rabbitmqadmin"
      service msys-rabbitmq start
      $RABBITMQADMIN declare exchange name=momentum_metrics type=topic
      $RABBITMQCTL add_user rabbitmq "p1-Vk0lXy"
      $RABBITMQCTL set_user_tags rabbitmq administrator
      $RABBITMQCTL set_permissions -p '/' rabbitmq '.*' '.*' '.*'
      $RABBITMQCTL delete_user guest

echo '
{
 "application": {
 "cassandraSupport": {
 "enabled": false
 },
 "analyticsSupport": {
 "enabled": false
 }
 }
}
' > /opt/msys/app/webhooks-api/config/production.json


echo '
[
 {
 "name": "My example webhook",
 "events": [
   "delivery", "injection", "bounce", "delay", "policy_rejection",
   "out_of_band", "open", "click",
   "generation_failure", "generation_rejection", "spam_complaint",
   "ad_status", "ad_adjust",
   "link_unsubscribe", "sms_status"
 ],
 "target": "https://your-consumer-domain2.com/all/events/please/path/to/your/code"
 }
]
' >  /opt/msys/app/webhooks-api/config/webhooks.json

echo '{}' > /opt/msys/app/webhooks-etl/config/production.json

# remove comment from the event_hydrant and event_hose
sed -i "/^\s*#event_.*}$/ s|^||; /^\s*#event_/, /);$/ s|^||" $DEFAULT/ecelerity.conf

/opt/msys/ecelerity/bin/eccfg commit \
 --username admin --password $ADMINPASS \
 --add-all --message "Enabling Event Hose"

      service ecelerity restart

fi

#######################################
# Commit and restart
#######################################
chown ecuser.ecuser $DEFAULT/* -R
service ecelerity restart

echo 
echo 
echo "Installation complete!"
echo 
echo 
cat /etc/motd
sh /etc/motd.sh

